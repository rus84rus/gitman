Самый основной метод:
1. Форкаете репозиторий github.com/user1/project, получаете github.com/you/project
2. Уже форкнутый репозиторий сливаете себе на комп:
git clone git@github.com:/you/project project
3. Создаёте отсылку на «родительский» репозитарий, например как на upstream
git remote add git@github.com:/user1/project upstream, чтобы потом сливать изменения с «родителя» себе 
git pull upstream master
4. Создаёте новую ветку
git checkout -b feature
5. Работаете, делаете коммиты, в случае необходимости отслеживания изменений в «родителе», сливаете изменения с него
и вливаете в свою ветку таким образом:
git checkout master
git pull upstream master
git checkout feature
git merge master
6. Когда работу сделали, заливаете изменения в свой github-репозиторий в свою ветку:
git push origin feature
7. Теперь идёте на гитхаб, в свой репозиторий и жмёте вверху кнопочку «Pull request»
8. Слева выбираете в какую ветку будут вливаться изменения в родительском репозитории,
справа — какие изменения будут браться
с вашего репозитория. По примеру: справа project/master, слева project/feature.
ВЫЖНО: Договоритесь с владельцем «родительского» репозитория, в какую ветку будете вливать изменения 
(он может написать это в
README)
9. Заполняете название и описание (название потом попадёт в описание мёрдж-коммита 
и станет достоянием общественности, учтите
это).
10. Нажимаете Send Pull Request

Вуаля, вы его отправили. Владелец рассмотрит ваши изменения и, возможно, их примет и вольёт к себе.
На практике, лучше перед посылкой пулл-реквестов, вручную синхронизироваться с веткой, 
в которую будете посылать изменения, чтобы у владельца merge прошёл гладко (больше шансов, что пулл примут ;-) )
Не забудьте потом сделать git pull upstream master, чтобы увидеть изменения у себя.

Надеюсь, это мини-руководство поможет вам сделать мир чуточку лучше )))

11. git alias
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

12. Чтобы удалить ветку в локальном репозитории

13. BRANCHES AFTER CLONE
By default, git clone creates only one branch: the currently checked out one, generally master. 
However, it does create remote tracking branches for all other branches in the remote. 
Think of these as local copies of the remote's branches, which can be updated by fetching. 
They're not real local branches, as they're intended only as pointers to where the remote's branches are,
not for you to work on.

If you run git branch -a you'll see all branches, local and remote.
If you want to see just the remote ones, 
use git branch -r. If you prefer a visual history display, try gitk --all (or gitk --remotes).

To create a local branch to work on, use

git branch <branch-name> origin/<branch-name>

That'll create a new local branch using the remote's branch as the starting point.

git branch -d <branch_name>
Чтобы удалить ветку в удаленном репозитории
git push origin --delete <branch_name>

You can directly do:

git checkout <original-remote-branch-name>

This automatically creates a local branch which tracks the remote branch with the same name. 
Do this always after cloning, if you want to work on a particular branch other than master.


14. ######### DROP TABLE AND DELETE MIGRATIONS ##########

https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html

The project is still in the development environment and you want to perform a full clean up.
You don’t mind throwing the whole database away.
1. Remove the all migrations files within your project

Go through each of your projects apps migration folder and remove everything inside,
except the __init__.py file.

Or if you are using a unix-like OS you can run the following script (inside your project dir):

find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete

2. Drop the current database, or delete the db.sqlite3 if it is your case.
3. Create the initial migrations and generate the database schema:

python manage.py makemigrations
python manage.py migrate

And you are good to go.




15. ************ GIT JUMP TO PREVIOUS COMMIT ****************

Temporarily switch to a different commit

If you want to temporarily go back to it, fool around, then come back to where you are, 
all you have to do is check out the desired commit:

# This will detach your HEAD, that is, leave you with no branch checked out:
git checkout 0d1d7fc32

Or if you want to make commits while you're there, go ahead and make a new branch while you're at it:

git checkout -b old-state 0d1d7fc32

To go back to where you were, just check out the branch you were on again.
(If you've made changes, as always when switching branches, you'll have to deal with them as appropriate.
You could reset to throw them away; you could stash, checkout, stash pop to take them with you;
you could commit them to a branch there if you want a branch there.)




16.             >>>>>>>>> STASH <<<<<

Создание ветки из спрятанных изменений

Если вы спрятали какие-то наработки и оставили их на время, а в это время продолжили работать на той же ветке,
то у вас могут возникнуть трудности с восстановлением спрятанной работы.
Если apply попытается изменить файл, который вы редактировали после прятанья,
то возникнет конфликт слияния, который надо будет разрешить.
Если нужен более простой способ снова потестировать спрятанную работу,
можно выполнить команду git stash branch, которая создаст вам новую ветку с началом из того коммита, 
на котором вы находились во время прятанья, восстановит в ней вашу работу и затем удалит спрятанное, 
если оно применилось успешно:

$ git stash branch testchanges




